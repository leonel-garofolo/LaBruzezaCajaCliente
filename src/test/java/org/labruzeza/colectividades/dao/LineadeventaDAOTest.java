/*
 * Created on 24 oct 2016 ( Time 09:13:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.labruzeza.colectividades.dao;

import java.math.BigDecimal;
import java.sql.SQLException;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.labruzeza.colectividades.dao.commons.DAOProvider;
import org.labruzeza.colectividades.dao.commons.DAOTestUtil;
import org.labruzeza.colectividades.modelo.Lineadeventa;

/**
 * JUnit tests for LineadeventaDAO
 * 
 * @author Telosys Tools
 *
 */
public class LineadeventaDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE lineadeventa ("
			+ "idLineaDeVenta IDENTITY AUTO_INCREMENT NOT NULL,"
			+ "idVenta INTEGER ,"
			+ "idProducto INTEGER ,"
			+ "precio DECIMAL ,"
			+ "cantidad INTEGER ,"
			+ "PRIMARY KEY(idLineaDeVenta)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test LineadeventaDAO ");
    	LineadeventaDAO dao = DAOProvider.getDAO(LineadeventaDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Lineadeventa lineadeventa = new Lineadeventa();
		//--- Key values
		// Auto-incremented key : nothing to set in the Primary Key
		//--- Other values
		lineadeventa.setIdventa(100); // "idVenta" : java.lang.Integer
		lineadeventa.setIdproducto(100); // "idProducto" : java.lang.Integer
		lineadeventa.setPrecio((new BigDecimal(10000))); // "precio" : java.math.BigDecimal
		lineadeventa.setCantidad(100); // "cantidad" : java.lang.Integer

    	//--- INSERT
    	System.out.println("Insert : " + lineadeventa );
    	Integer pkAutoIncr = dao.insert(lineadeventa);
    	lineadeventa.setIdlineadeventa( pkAutoIncr );
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(lineadeventa) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Lineadeventa lineadeventa2 = dao.find(pkAutoIncr);
    	Assert.assertNotNull(lineadeventa2);
    	Assert.assertTrue( dao.exists(lineadeventa2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		lineadeventa2.setIdventa(200); // "idVenta" : java.lang.Integer
		lineadeventa2.setIdproducto(200); // "idProducto" : java.lang.Integer
		lineadeventa2.setPrecio((new BigDecimal(20000))); // "precio" : java.math.BigDecimal
		lineadeventa2.setCantidad(200); // "cantidad" : java.lang.Integer
    	System.out.println("Update : " + lineadeventa2 );
    	Assert.assertTrue( dao.update(lineadeventa2) == 1 );
    	
    	//--- LOAD
    	Lineadeventa lineadeventa3 = new Lineadeventa();
    	lineadeventa3.setIdlineadeventa( pkAutoIncr );
    	Assert.assertTrue( dao.load(lineadeventa3) );
    	System.out.println("Loaded : " + lineadeventa3 );
		Assert.assertEquals(lineadeventa2.getIdventa(), lineadeventa3.getIdventa() ); 
		Assert.assertEquals(lineadeventa2.getIdproducto(), lineadeventa3.getIdproducto() ); 
		Assert.assertEquals(lineadeventa2.getPrecio(), lineadeventa3.getPrecio() ); 
		Assert.assertEquals(lineadeventa2.getCantidad(), lineadeventa3.getCantidad() ); 


    	lineadeventa3.setIdlineadeventa(300);
    	Assert.assertFalse( dao.load(lineadeventa3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + lineadeventa2 );
    	Assert.assertTrue( dao.delete(lineadeventa2) == 1 );
    	Assert.assertTrue( dao.delete(lineadeventa2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(lineadeventa2) ) ;
    	lineadeventa2 = dao.find(100);
    	Assert.assertNull( lineadeventa2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
