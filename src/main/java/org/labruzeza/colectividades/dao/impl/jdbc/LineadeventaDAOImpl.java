/*
 * Created on 24 oct 2016 ( Time 09:13:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.labruzeza.colectividades.dao.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.labruzeza.colectividades.modelo.Lineadeventa;
import org.labruzeza.colectividades.dao.LineadeventaDAO;
import org.labruzeza.colectividades.dao.impl.jdbc.commons.GenericDAO;

/**
 * Lineadeventa DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class LineadeventaDAOImpl extends GenericDAO<Lineadeventa> implements LineadeventaDAO {

	private final static String SQL_SELECT = 
		"select idLineaDeVenta, idVenta, idProducto, precio, cantidad from lineadeventa where idLineaDeVenta = ?";

	private final static String SQL_INSERT = 
		"insert into lineadeventa ( idVenta, idProducto, precio, cantidad ) values ( ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update lineadeventa set idVenta = ?, idProducto = ?, precio = ?, cantidad = ? where idLineaDeVenta = ?";

	private final static String SQL_DELETE = 
		"delete from lineadeventa where idLineaDeVenta = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from lineadeventa";

	private final static String SQL_COUNT = 
		"select count(*) from lineadeventa where idLineaDeVenta = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public LineadeventaDAOImpl() {
		super();
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param idlineadeventa;
	 * @return the new instance
	 */
	private Lineadeventa newInstanceWithPrimaryKey( Integer idlineadeventa ) {
		Lineadeventa lineadeventa = new Lineadeventa();
		lineadeventa.setIdlineadeventa( idlineadeventa );
		return lineadeventa ;
	}

	//----------------------------------------------------------------------
	/**
	 * Finds a bean by its primary key 
	 * @param idlineadeventa;
	 * @return the bean found or null if not found 
	 */
	@Override
	public Lineadeventa find( Integer idlineadeventa ) {
		Lineadeventa lineadeventa = newInstanceWithPrimaryKey( idlineadeventa ) ;
		if ( super.doSelect(lineadeventa) ) {
			return lineadeventa ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param lineadeventa
	 * @return true if found, false if not found
	 */
	@Override
	public boolean load( Lineadeventa lineadeventa ) {
		return super.doSelect(lineadeventa) ;
	}
    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param lineadeventa
	 */
	@Override
	public Integer insert(Lineadeventa lineadeventa) {
		Long key = super.doInsertAutoIncr(lineadeventa);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/**
	 * Updates the given bean in the database 
	 * @param lineadeventa
	 * @return
	 */
	@Override
	public int update(Lineadeventa lineadeventa) {
		return super.doUpdate(lineadeventa);
	}	

    //----------------------------------------------------------------------
	/**
	 * Deletes the record in the database using the given primary key value(s) 
	 * @param idlineadeventa;
	 * @return
	 */
	@Override
	public int delete( Integer idlineadeventa ) {
		Lineadeventa lineadeventa = newInstanceWithPrimaryKey( idlineadeventa ) ;
		return super.doDelete(lineadeventa);
	}

    //----------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database 
	 * @param lineadeventa
	 * @return
	 */
	@Override
	public int delete( Lineadeventa lineadeventa ) {
		return super.doDelete(lineadeventa);
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param idlineadeventa;
	 * @return
	 */
	@Override
	public boolean exists( Integer idlineadeventa ) {
		Lineadeventa lineadeventa = newInstanceWithPrimaryKey( idlineadeventa ) ;
		return super.doExists(lineadeventa);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param lineadeventa
	 * @return
	 */
	@Override
	public boolean exists( Lineadeventa lineadeventa ) {
		return super.doExists(lineadeventa);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Lineadeventa lineadeventa) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, lineadeventa.getIdlineadeventa() ) ; // "idLineaDeVenta" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected Lineadeventa populateBean(ResultSet rs, Lineadeventa lineadeventa) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		lineadeventa.setIdlineadeventa(rs.getInt("idLineaDeVenta")); // java.lang.Integer
		if ( rs.wasNull() ) { lineadeventa.setIdlineadeventa(null); }; // not primitive number => keep null value if any
		lineadeventa.setIdventa(rs.getInt("idVenta")); // java.lang.Integer
		if ( rs.wasNull() ) { lineadeventa.setIdventa(null); }; // not primitive number => keep null value if any
		lineadeventa.setIdproducto(rs.getInt("idProducto")); // java.lang.Integer
		if ( rs.wasNull() ) { lineadeventa.setIdproducto(null); }; // not primitive number => keep null value if any
		lineadeventa.setPrecio(rs.getBigDecimal("precio")); // java.math.BigDecimal
		if ( rs.wasNull() ) { lineadeventa.setPrecio(null); }; // not primitive number => keep null value if any
		lineadeventa.setCantidad(rs.getInt("cantidad")); // java.lang.Integer
		if ( rs.wasNull() ) { lineadeventa.setCantidad(null); }; // not primitive number => keep null value if any
		return lineadeventa ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Lineadeventa lineadeventa) throws SQLException {

		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "idLineaDeVenta" is auto-incremented => no set in insert		
		setValue(ps, i++, lineadeventa.getIdventa() ) ; // "idVenta" : java.lang.Integer
		setValue(ps, i++, lineadeventa.getIdproducto() ) ; // "idProducto" : java.lang.Integer
		setValue(ps, i++, lineadeventa.getPrecio() ) ; // "precio" : java.math.BigDecimal
		setValue(ps, i++, lineadeventa.getCantidad() ) ; // "cantidad" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Lineadeventa lineadeventa) throws SQLException {

		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, lineadeventa.getIdventa() ) ; // "idVenta" : java.lang.Integer
		setValue(ps, i++, lineadeventa.getIdproducto() ) ; // "idProducto" : java.lang.Integer
		setValue(ps, i++, lineadeventa.getPrecio() ) ; // "precio" : java.math.BigDecimal
		setValue(ps, i++, lineadeventa.getCantidad() ) ; // "cantidad" : java.lang.Integer
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, lineadeventa.getIdlineadeventa() ) ; // "idLineaDeVenta" : java.lang.Integer
	}

	@Override
	protected String getSqlLoadAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected Lineadeventa populateBeanAll(ResultSet rs) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

}
